#!/usr/bin/env bash

set -Eeuo pipefail

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd -P)

packages_to_stow="shell:git:nvim:tmux"

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-up|--update-upgrade] [-ext|--external-packages-script] [-apt|--apt-packages-list] [-snap|--snap-packages-list]

Dotfiles installer script.

Available options:

-h, --help                          Print this help and exit
-v, --verbose                       Print script debug infor
-up, --update-upgrade		    Update and upgrade system packages
-ext, --external-packages-script    Install external packages using script ${script_dir}/installer/install-external-packages
-apt, --apt-packages-list           Install packages listed in ${script_dir}/installer/apt-packages-list.txt using apt package manager
-snap, --snap-packages-list         Install packages liston in ${script_dir}/installer/snap-packages-list.txt using snap package manager 
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

log() {
  if [ "${#}" -eq 1 ]; then
    local lvl="INFO"
    local msg="${1}"
  else
    local lvl="${1}"
    local msg="${2}"
  fi
  echo "$(date +'%H:%M:%S') [${lvl}] - ${msg}"
}

die() {
  if [ "${#}" -eq 1 ]; then
    local lvl="ERROR"
    local msg="${1}"
    local code=1
  else
    local lvl="${1}"
    local msg="${2}"
    local code="${3}"
  fi
  log "${lvl}" "${msg}"
  exit "${code}"
}

parse_params() {
  update_upgrade=0
  install_external_packages=0
  install_apt_packages=0
  install_snap_packages=0

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -up | --update-upgrade) update_upgrade=1 ;;
    -ext | --external-packages-script) install_external_packages=1 ;;
    -snap | --snap-packages-list) install_snap_packages=1 ;;
    -apt | --apt-packages-list) install_apt_packages=1 ;;
    -?*) die "Unknown option: ${1}" ;;
    *) break ;;
    esac
    shift
  done

  log "Starting up..."

  if [ ${install_external_packages} -eq 0 ] && [ ${install_apt_packages} -eq 0 ] && [ ${install_snap_packages} -eq 0 ]; then
    log "WARN" "Script running as 'symlinks' farm manager only"
    log "WARN" "It will fail if required package is not installed"
    log "WARN" "Please, see ./install --help for usage information"
  fi

  if [ ${install_apt_packages} -eq 1 ] && [ ! -f "${script_dir}"/installer/apt-packages-list.txt ]; then
    die "File ${script_dir}/installer/apt-packages-list.txt not found in script directory"
  fi

  if [ ${install_snap_packages} -eq 1 ] && [ ! -f "${script_dir}"/installer/snap-packages-list.txt ]; then
    die "File ${script_dir}/installer/snap-pakcages-list.txt not found in script directory"
  fi

  if [ ${install_external_packages} -eq 1 ] && [ ! -f "${script_dir}"/installer/install-external-packages ]; then
    die "File 'external-packages' not found in script directory"
  fi

  log "Parameters parsed successfully"

  return 0
}

parse_params "${@}"
setup_colors

iterate_array() {
  local array="${1}"

  IFS=':' read -ra array <<<"${array}"
  for item in "${array[@]}"; do
    echo "${item}"
  done
}

install_snap_packages() {
  log "Installing snap packages"
  while IFS=: read -r snap; do
    # Skip blank lines and comments
    [[ -z "${snap}" || "${snap}" == \#* ]] && continue
    if ! snap list | grep -q "^${snap}\s" >/dev/null 2>&1; then
      log "Installing package: ${snap}"
      sudo snap install "${snap}" --classic
      log "'${snap}' installed successfully"
    else
      log "Package '${snap}' is already installed"
    fi
  done <"${script_dir}/installer/snap-packages-list.txt"
  log "SUCCESS" "Snap packages installation complete"
}

install_external_packages() {
  log "Installing external packages using script"
  bash "${script_dir}/installer/install-external-packages"
  log "SUCCESS" "External packages installation complete"
}

capslock_ctrl_mapping() {
  log "Mapping CapsLock key to Ctrl..."
  gsettings set org.gnome.desktop.input-sources xkb-options "['ctrl:nocaps']"
  log "Key mapping complete"
}

gnome_system_theme_switch_cron() {
  log "Adding cron jobs to change system theme on selected times"
  crontab_entry_light='0 7 * * * gnome-theme-switcher light >> ${HOME}/.cron_theme.log 2>&1'
  crontab_entry_dark='0 19 * * * gnome-theme-switcher dark >> ${HOME}/.cron_theme.log 2>&1'

  local current_crontab
  current_crontab=$(crontab -l 2>/dev/null || true)

  if ! grep -q "gnome-theme-switcher light" <<<"${current_crontab}"; then
    (
      echo "${current_crontab}"
      echo "${crontab_entry_light}"
    ) | crontab -
    log "Added 7AM light mode cron job"
  fi

  if ! grep -q "gnome-theme-switcher dark" <<<"${current_crontab}"; then
    (
      crontab -l 2>/dev/null
      echo "${crontab_entry_dark}"
    ) | crontab -
    log "Added 7PM dark mode cron job"
  fi
  log "Jobs added to crontab"
}

install_tmux_plugin_manager() {
  git clone https://github.com/tmux-plugins/tpm "${HOME}"/.tmux/plugins/tpm
}

if command -v gnome-terminal; then
  capslock_ctrl_mapping
fi

if [ ${update_upgrade} -eq 1 ]; then
  log "Updating system..."
  sudo apt-get update
  log "Update completed"

  log "Upgrading system"
  sudo apt-get upgrade -y
  log "System upgrade completed"
fi

if [ ${install_apt_packages} -eq 1 ]; then . bin/install_apt_packages.sh; fi
if [ ${install_snap_packages} -eq 1 ]; then install_snap_packages; fi
if [ ${install_external_packages} -eq 1 ]; then install_external_packages; fi

log "Setting up symlinks with stow..."
for package in $(iterate_array ${packages_to_stow}); do
  stow -R --no-folding --verbose=2 --target="${HOME}" "${package}"
done

log "Sourcing .profile file to activate environment"
. "${HOME}"/.profile

if [ ! -d "${HOME}"/.tmux/plugins/tpm ]; then install_tmux_plugin_manager; fi

gnome_system_theme_switch_cron

log "SUCCESS" "Dotfiles and packages installation complete"

exec "${SHELL}"
